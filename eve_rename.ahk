; Generated by AutoGUI 2.2.6a
#NoEnv
#Warn
#SingleInstance Force
SetWorkingDir %A_ScriptDir%
SendMode Input


Gui Add, Button, gGuiClose x8 y234 w80 h23 +Default, &Exit
Gui Add, StatusBar,
Gui Add, ListView, x8 y8 w300 h150 -LV0x10 +NoSortHdr +Disabled, Signature Types|# scanned
Gui Add, Hotkey, hWndhmsctls_hotkey321 vhotkey gHotkeyChange x104 y220 w196 h21 Limit128, #
Gui Add, Text, x8 y166 w300 h30, NOTE: Other signatures (WH's, Combat, ...) will not be pasted ingame.
Gui Add, GroupBox, x96 y204 w212 h83, Hotkey
Gui Add, Text, x104 y249 w196 h30, Change hotkey to desired key. Starts with '#' as default.

Gui Show, w316 h318, E-Uni Bookmark Helper
WinSet, Style, -0x30000, A

; Do not edit above this line

SB_SetParts(120)
SB_SetText("Last scanned signature:",1)

LV_Add(,"Data",0)
LV_Add(,"Relic",0)
LV_Add(,"Gas",0)
LV_Add(,"Null Data",0)
LV_Add(,"Null Relic",0)
LV_Add(,"Others(WH's,Combat,...)",0)
LV_ModifyCol(1,"AutoHdr")
LV_ModifyCol(2,"AutoHdr")

prev_hkey := "#"
hkey := "#"
Hotkey %hkey%, execute

Return

GuiEscape:
GuiClose:
    ExitApp

execute:
clipboard =
Send {Ctrl down}c{Ctrl up}
Sleep 150
clipboard := proc_string(clipboard)
Send {Ctrl down}v{Ctrl up}
Sleep 150
Return



HotkeyChange(){
    global hkey
    global prev_hkey
    Hotkey %prev_hkey%, execute, Off
    if hkey in +,^,!,+^,+!,^!
        return
    if (hkey = "")
        return
    Hotkey %hkey%, execute, On
    prev_hkey := hkey
}



proc_string(copied_string){
	if InStr(copied_string, "Unsecured"){

		RegExMatch(copied_string, "O)([a-zA-Z]{3})-\d{3}\s(?>\w+\s){2}([\w\s]+)", ret)
        SB_SetText("D [" . ret.value(1) . "] " . ret.value(2),2)
        LV_GetText(lv_current_num,1,2)
        LV_Modify(1,"Col2",lv_current_num+1)
		return "D [" . ret.value(1) . "] " . ret.value(2)

	} else if InStr(copied_string, "Forgotten"){

		RegExMatch(copied_string, "O)([a-zA-Z]{3})-\d{3}\s(?>\w+\s){2}([\w\s]+)", ret)
        SB_SetText("R [" . ret.value(1) . "] " . ret.value(2),2)
        LV_GetText(lv_current_num,2,2)
        LV_Modify(2,"Col2",lv_current_num+1)
        return "R [" . ret.value(1) . "] " . ret.value(2)

	} else if InStr(copied_string, "Reservoir"){

		RegExMatch(copied_string, "O)([a-zA-Z]{3})-\d{3}\s([\w]+)[\s\w]+", ret)
        SB_SetText("G [" . ret.value(1) . "] " . ret.value(2),2)
        LV_GetText(lv_current_num,3,2)
        LV_Modify(3,"Col2",lv_current_num+1)
        return "G [" . ret.value(1) . "] " . ret.value(2)

	} else if InStr(copied_string, "Central"){

		RegExMatch(copied_string, "O)([a-zA-Z]{3})-\d{3}\sCentral\s(Serpentis|Blood Raider|Guristas|Angel|Sansha)[\s\w]+", ret)
        SB_SetText("ND [" . ret.value(1) . "] " . ret.value(2),2)
        LV_GetText(lv_current_num,4,2)
        LV_Modify(4,"Col2",lv_current_num+1)
        return "ND [" . ret.value(1) . "] " . ret.value(2)

	} else if InStr(copied_string, "Ruined"){

		RegExMatch(copied_string, "O)([a-zA-Z]{3})-\d{3}\sRuined\s(Serpentis|Blood Raider|Guristas|Angel|Sansha)[\s\w]+", ret)
        SB_SetText("NR [" . ret.value(1) . "] " . ret.value(2),2)
        LV_GetText(lv_current_num,5,2)
        LV_Modify(5,"Col2",lv_current_num+1)
        return "NR [" . ret.value(1) . "] " . ret.value(2)

	} else {
    
        RegExMatch(copied_string, "O)([a-zA-Z]{3})-\d{3}([\s\w]+)", ret)
        SB_SetText("OTHER [" . ret.value(1) . "] " . ret.value(2),2)
        LV_GetText(lv_current_num,6,2)
        LV_Modify(6,"Col2",lv_current_num+1) 
        
    }
}



